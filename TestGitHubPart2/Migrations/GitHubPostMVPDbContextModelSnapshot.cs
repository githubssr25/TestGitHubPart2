// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PostMVPFinalProject.Context;

#nullable disable

namespace TestGitHubPart2.Migrations
{
    [DbContext(typeof(GitHubPostMVPDbContext))]
    partial class GitHubPostMVPDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("PostMVPProject.Models.Annotation", b =>
                {
                    b.Property<int>("AnnotationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AnnotationId"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("RepositoryId")
                        .HasColumnType("integer");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AnnotationId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Annotations");

                    b.HasData(
                        new
                        {
                            AnnotationId = 1,
                            Content = "Excellent IDE for web development",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 1,
                            Type = "Note",
                            UserId = "1"
                        },
                        new
                        {
                            AnnotationId = 2,
                            Content = "Mobile Development",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 2,
                            Type = "Tag",
                            UserId = "2"
                        },
                        new
                        {
                            AnnotationId = 3,
                            Content = "Systems programming language with memory safety",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 3,
                            Type = "Note",
                            UserId = "3"
                        },
                        new
                        {
                            AnnotationId = 4,
                            Content = "Deep Learning",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 4,
                            Type = "Tag",
                            UserId = "4"
                        },
                        new
                        {
                            AnnotationId = 5,
                            Content = "JavaScript runtime environment",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 5,
                            Type = "Note",
                            UserId = "5"
                        },
                        new
                        {
                            AnnotationId = 6,
                            Content = "Automated Testing",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 9,
                            Type = "Tag",
                            UserId = "7"
                        },
                        new
                        {
                            AnnotationId = 7,
                            Content = "Great sandbox for testing ML algorithms.",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 10,
                            Type = "Note",
                            UserId = "8"
                        },
                        new
                        {
                            AnnotationId = 8,
                            Content = "Full Stack",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 8,
                            Type = "Tag",
                            UserId = "9"
                        },
                        new
                        {
                            AnnotationId = 9,
                            Content = "Awesome data visualization library for presentations.",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 9,
                            Type = "Note",
                            UserId = "10"
                        },
                        new
                        {
                            AnnotationId = 10,
                            Content = "Could use this for testing in our current project.",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 9,
                            Type = "Note",
                            UserId = "1"
                        },
                        new
                        {
                            AnnotationId = 11,
                            Content = "Sandbox looks promising for prototyping new ML models.",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 10,
                            Type = "Note",
                            UserId = "2"
                        },
                        new
                        {
                            AnnotationId = 12,
                            Content = "Starter Kit",
                            CreatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            RepositoryId = 9,
                            Type = "Tag",
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("PostMVPProject.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Backend"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "Frontend"
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Artificial Intelligence"
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Full Stack"
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "Data Science"
                        },
                        new
                        {
                            CategoryId = 6,
                            Description = "Security"
                        },
                        new
                        {
                            CategoryId = 7,
                            Description = "Testing"
                        },
                        new
                        {
                            CategoryId = 8,
                            Description = "Machine Learning"
                        },
                        new
                        {
                            CategoryId = 9,
                            Description = "Other"
                        });
                });

            modelBuilder.Entity("PostMVPProject.Models.Issue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Body")
                        .HasColumnType("text");

                    b.Property<int>("Comments")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("HtmlUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Labels")
                        .HasColumnType("jsonb");

                    b.Property<int?>("RepositoryId")
                        .HasColumnType("integer");

                    b.Property<string>("RepositoryUrl")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RepositoryId");

                    b.ToTable("Issues");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Body = "We need to update the documentation to reflect the latest changes in React hooks API",
                            Comments = 5,
                            CreatedAt = new DateTime(2024, 1, 15, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/facebook/react/issues/1",
                            Labels = "[\"documentation\",\"good first issue\"]",
                            RepositoryId = 6,
                            RepositoryUrl = "https://github.com/facebook/react",
                            State = "open",
                            Title = "Update React documentation for new hooks",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 2,
                            Body = "Need to add more examples showing how to create and use custom hooks effectively",
                            Comments = 3,
                            CreatedAt = new DateTime(2024, 1, 16, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/facebook/react/issues/2",
                            Labels = "[\"documentation\",\"help wanted\"]",
                            RepositoryId = 6,
                            RepositoryUrl = "https://github.com/facebook/react",
                            State = "open",
                            Title = "Add example for custom hooks",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 3,
                            Body = "Memory leaks are observed when opening large JSON files",
                            Comments = 12,
                            CreatedAt = new DateTime(2024, 1, 10, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/microsoft/vscode/issues/3",
                            Labels = "[\"bug\",\"performance\"]",
                            RepositoryId = 1,
                            RepositoryUrl = "https://github.com/microsoft/vscode",
                            State = "open",
                            Title = "Fix memory leak in VSCode",
                            UpdatedAt = new DateTime(2024, 1, 19, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 4,
                            Body = "Investigate and optimize the startup time of Flutter apps",
                            Comments = 7,
                            CreatedAt = new DateTime(2024, 1, 14, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/flutter/flutter/issues/4",
                            Labels = "[\"performance\",\"enhancement\"]",
                            RepositoryId = 2,
                            RepositoryUrl = "https://github.com/flutter/flutter",
                            State = "open",
                            Title = "Improve Flutter startup time",
                            UpdatedAt = new DateTime(2024, 1, 20, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 5,
                            Body = "A comprehensive guide for writing async code in Rust should be created",
                            Comments = 8,
                            CreatedAt = new DateTime(2024, 1, 17, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/rust-lang/rust/issues/5",
                            Labels = "[\"documentation\",\"async\"]",
                            RepositoryId = 3,
                            RepositoryUrl = "https://github.com/rust-lang/rust",
                            State = "open",
                            Title = "Add Rust async programming guide",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 6,
                            Body = "Running models on large datasets leads to memory overflow errors",
                            Comments = 15,
                            CreatedAt = new DateTime(2024, 1, 12, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/tensorflow/tensorflow/issues/6",
                            Labels = "[\"bug\",\"gpu\"]",
                            RepositoryId = 7,
                            RepositoryUrl = "https://github.com/tensorflow/tensorflow",
                            State = "open",
                            Title = "TensorFlow GPU memory issue",
                            UpdatedAt = new DateTime(2024, 1, 20, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 7,
                            Body = "Pods are unable to communicate in custom networking configurations",
                            Comments = 10,
                            CreatedAt = new DateTime(2024, 1, 8, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/kubernetes/kubernetes/issues/7",
                            Labels = "[\"networking\",\"help wanted\"]",
                            RepositoryId = 8,
                            RepositoryUrl = "https://github.com/kubernetes/kubernetes",
                            State = "open",
                            Title = "Kubernetes networking problem",
                            UpdatedAt = new DateTime(2024, 1, 19, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 8,
                            Body = "Certain hardware configurations are causing kernel panic",
                            Comments = 22,
                            CreatedAt = new DateTime(2024, 1, 9, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/torvalds/linux/issues/8",
                            Labels = "[\"kernel\",\"bug\"]",
                            RepositoryId = 9,
                            RepositoryUrl = "https://github.com/torvalds/linux",
                            State = "open",
                            Title = "Fix Linux kernel panic on boot",
                            UpdatedAt = new DateTime(2024, 1, 18, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 9,
                            Body = "Performance degradation observed when running complex queries",
                            Comments = 14,
                            CreatedAt = new DateTime(2024, 1, 11, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/django/django/issues/9",
                            Labels = "[\"performance\",\"query\"]",
                            RepositoryId = 10,
                            RepositoryUrl = "https://github.com/django/django",
                            State = "open",
                            Title = "Django ORM performance issues",
                            UpdatedAt = new DateTime(2024, 1, 19, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 10,
                            Body = "Add examples and explanations for better understanding of async/await usage in Node.js",
                            Comments = 6,
                            CreatedAt = new DateTime(2024, 1, 13, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/nodejs/node/issues/10",
                            Labels = "[\"documentation\",\"async\"]",
                            RepositoryId = 5,
                            RepositoryUrl = "https://github.com/nodejs/node",
                            State = "open",
                            Title = "Improve Node.js documentation on async/await",
                            UpdatedAt = new DateTime(2024, 1, 20, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            Id = 11,
                            Body = "Improve the performance of built-in middleware functions to reduce response time.",
                            Comments = 9,
                            CreatedAt = new DateTime(2024, 1, 17, 6, 0, 0, 0, DateTimeKind.Utc),
                            HtmlUrl = "https://github.com/expressjs/express/issues/11",
                            Labels = "[\"performance\",\"enhancement\"]",
                            RepositoryId = 11,
                            RepositoryUrl = "https://github.com/expressjs/express",
                            State = "open",
                            Title = "Optimize Express middleware performance",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PostMVPProject.Models.Repository", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<string>("CloneUrl")
                        .HasColumnType("text");

                    b.Property<string>("CommitsUrl")
                        .HasColumnType("text");

                    b.Property<string>("ContributorsUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("Forks")
                        .HasColumnType("integer");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GitCommitsUrl")
                        .HasColumnType("text");

                    b.Property<bool>("HasIssues")
                        .HasColumnType("boolean");

                    b.Property<bool>("HasProjects")
                        .HasColumnType("boolean");

                    b.Property<string>("HtmlUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IssuesUrl")
                        .HasColumnType("text");

                    b.Property<string>("Language")
                        .HasColumnType("text");

                    b.Property<string>("License")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OpenIssuesCount")
                        .HasColumnType("integer");

                    b.Property<string>("OwnerHtmlUrl")
                        .HasColumnType("text");

                    b.Property<string>("OwnerLogin")
                        .HasColumnType("text");

                    b.Property<string>("PullsUrl")
                        .HasColumnType("text");

                    b.Property<DateTime?>("PushedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ReleasesUrl")
                        .HasColumnType("text");

                    b.Property<int>("Stars")
                        .HasColumnType("integer");

                    b.Property<string>("SubscribersUrl")
                        .HasColumnType("text");

                    b.Property<string>("TagsUrl")
                        .HasColumnType("text");

                    b.Property<string>("Topics")
                        .HasColumnType("jsonb");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Visibility")
                        .HasColumnType("text");

                    b.Property<int?>("WatchersCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Repositories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2015, 9, 3, 5, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Visual Studio Code",
                            Forks = 28500,
                            FullName = "microsoft/vscode",
                            HasIssues = true,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/microsoft/vscode",
                            Language = "TypeScript",
                            Name = "vscode",
                            OpenIssuesCount = 250,
                            OwnerHtmlUrl = "https://github.com/microsoft",
                            OwnerLogin = "microsoft",
                            Stars = 154000,
                            Topics = "[\"typescript\",\"editor\",\"ide\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2015, 3, 6, 6, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Flutter makes it easy and fast to build beautiful apps for mobile and beyond",
                            Forks = 25800,
                            FullName = "flutter/flutter",
                            HasIssues = true,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/flutter/flutter",
                            Language = "Dart",
                            Name = "flutter",
                            OpenIssuesCount = 320,
                            OwnerHtmlUrl = "https://github.com/flutter",
                            OwnerLogin = "flutter",
                            Stars = 159000,
                            Topics = "[\"dart\",\"mobile\",\"cross-platform\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2010, 6, 16, 5, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Empowering everyone to build reliable and efficient software",
                            Forks = 11200,
                            FullName = "rust-lang/rust",
                            HasIssues = true,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/rust-lang/rust",
                            Language = "Rust",
                            Name = "rust",
                            OpenIssuesCount = 420,
                            OwnerHtmlUrl = "https://github.com/rust-lang",
                            OwnerLogin = "rust-lang",
                            Stars = 88000,
                            Topics = "[\"rust\",\"systems-programming\",\"compiler\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2016, 8, 13, 5, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Tensors and Dynamic neural networks in Python",
                            Forks = 19800,
                            FullName = "pytorch/pytorch",
                            HasIssues = true,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/pytorch/pytorch",
                            Language = "C++",
                            Name = "pytorch",
                            OpenIssuesCount = 280,
                            OwnerHtmlUrl = "https://github.com/pytorch",
                            OwnerLogin = "pytorch",
                            Stars = 73000,
                            Topics = "[\"python\",\"machine-learning\",\"deep-learning\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2014, 11, 26, 6, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Node.js JavaScript runtime",
                            Forks = 26500,
                            FullName = "nodejs/node",
                            HasIssues = true,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/nodejs/node",
                            Language = "JavaScript",
                            Name = "node",
                            OpenIssuesCount = 180,
                            OwnerHtmlUrl = "https://github.com/nodejs",
                            OwnerLogin = "nodejs",
                            Stars = 98000,
                            Topics = "[\"javascript\",\"runtime\",\"server\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2013, 5, 24, 5, 0, 0, 0, DateTimeKind.Utc),
                            Description = "A declarative, efficient, and flexible JavaScript library for building user interfaces.",
                            Forks = 44000,
                            FullName = "facebook/react",
                            HasIssues = true,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/facebook/react",
                            Language = "JavaScript",
                            Name = "react",
                            OpenIssuesCount = 1200,
                            OwnerHtmlUrl = "https://github.com/facebook",
                            OwnerLogin = "facebook",
                            Stars = 210000,
                            Topics = "[\"javascript\",\"frontend\",\"react\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        },
                        new
                        {
                            Id = 7,
                            CreatedAt = new DateTime(2015, 11, 9, 6, 0, 0, 0, DateTimeKind.Utc),
                            Description = "An Open Source Machine Learning Framework for Everyone",
                            Forks = 87000,
                            FullName = "tensorflow/tensorflow",
                            HasIssues = true,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/tensorflow/tensorflow",
                            Language = "C++",
                            Name = "tensorflow",
                            OpenIssuesCount = 1900,
                            OwnerHtmlUrl = "https://github.com/tensorflow",
                            OwnerLogin = "tensorflow",
                            Stars = 180000,
                            Topics = "[\"machine-learning\",\"ai\",\"deep-learning\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        },
                        new
                        {
                            Id = 8,
                            CreatedAt = new DateTime(2014, 6, 6, 5, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Production-Grade Container Scheduling and Management",
                            Forks = 36000,
                            FullName = "kubernetes/kubernetes",
                            HasIssues = true,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/kubernetes/kubernetes",
                            Language = "Go",
                            Name = "kubernetes",
                            OpenIssuesCount = 1800,
                            OwnerHtmlUrl = "https://github.com/kubernetes",
                            OwnerLogin = "kubernetes",
                            Stars = 97000,
                            Topics = "[\"container\",\"orchestration\",\"kubernetes\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        },
                        new
                        {
                            Id = 9,
                            CreatedAt = new DateTime(2001, 4, 16, 5, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Linux kernel source tree",
                            Forks = 75000,
                            FullName = "torvalds/linux",
                            HasIssues = false,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/torvalds/linux",
                            Language = "C",
                            Name = "linux",
                            OpenIssuesCount = 500,
                            OwnerHtmlUrl = "https://github.com/torvalds",
                            OwnerLogin = "torvalds",
                            Stars = 150000,
                            Topics = "[\"operating-system\",\"kernel\",\"linux\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        },
                        new
                        {
                            Id = 10,
                            CreatedAt = new DateTime(2005, 7, 21, 5, 0, 0, 0, DateTimeKind.Utc),
                            Description = "The Web framework for perfectionists with deadlines",
                            Forks = 31000,
                            FullName = "django/django",
                            HasIssues = true,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/django/django",
                            Language = "Python",
                            Name = "django",
                            OpenIssuesCount = 1200,
                            OwnerHtmlUrl = "https://github.com/django",
                            OwnerLogin = "django",
                            Stars = 74000,
                            Topics = "[\"python\",\"web-framework\",\"django\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        },
                        new
                        {
                            Id = 11,
                            CreatedAt = new DateTime(2010, 6, 26, 5, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Fast, unopinionated, minimalist web framework for Node.js",
                            Forks = 10000,
                            FullName = "expressjs/express",
                            HasIssues = true,
                            HasProjects = true,
                            HtmlUrl = "https://github.com/expressjs/express",
                            Language = "JavaScript",
                            Name = "express",
                            OpenIssuesCount = 150,
                            OwnerHtmlUrl = "https://github.com/expressjs",
                            OwnerLogin = "expressjs",
                            Stars = 60000,
                            Topics = "[\"nodejs\",\"web-framework\",\"express\"]",
                            UpdatedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            Visibility = "public"
                        });
                });

            modelBuilder.Entity("PostMVPProject.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GitHubToken")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d0a44604-4cb1-4ad7-8818-e188a32b28e0",
                            Email = "john.doe@example.com",
                            EmailConfirmed = true,
                            FirstName = "John",
                            LastName = "Doe",
                            LockoutEnabled = false,
                            NormalizedEmail = "JOHN.DOE@EXAMPLE.COM",
                            NormalizedUserName = "JOHN_DOE",
                            PasswordHash = "AQAAAAIAAYagAAAAECDUX5xUcPe4qvir3Shm2L7orJecXxIb/Isv6b/Zwhqx9xgpqDuU9FrBVztjkfg4OQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6d3edab2-0c30-4168-9cc9-a178bbe4a345",
                            TwoFactorEnabled = false,
                            UserName = "john_doe"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "92aa6b78-b1d9-4f44-b40d-50944ad17128",
                            Email = "jane.smith@example.com",
                            EmailConfirmed = true,
                            FirstName = "Jane",
                            LastName = "Smith",
                            LockoutEnabled = false,
                            NormalizedEmail = "JANE.SMITH@EXAMPLE.COM",
                            NormalizedUserName = "JANE_SMITH",
                            PasswordHash = "AQAAAAIAAYagAAAAEPT9EDefveOQt/XPGIuq0KhF8NX4iZibNSJoys8VqtHSdRPGIovY5binhwyfyHEr5w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "d46bdce0-e6c7-44a9-8ba1-6ce3a028dbf7",
                            TwoFactorEnabled = false,
                            UserName = "jane_smith"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "608d7a6b-a914-4298-828b-38fcfa1a83fb",
                            Email = "alice.brown@example.com",
                            EmailConfirmed = true,
                            FirstName = "Alice",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALICE.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "ALICE_BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAEPIh2oH6ZX/RpNbA2+YIZwvR9uFTUWsZrei3dIsMiAsBptT/9b+XK3vFxFnW7VqbuQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "10221039-2c00-458c-a887-cb05e5ca3117",
                            TwoFactorEnabled = false,
                            UserName = "alice_brown"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e85a5523-80a4-4f15-9bd8-58a4670a1fb4",
                            Email = "bob.jones@example.com",
                            EmailConfirmed = true,
                            FirstName = "Bob",
                            LastName = "Jones",
                            LockoutEnabled = false,
                            NormalizedEmail = "BOB.JONES@EXAMPLE.COM",
                            NormalizedUserName = "BOB_JONES",
                            PasswordHash = "AQAAAAIAAYagAAAAEDnDz90ayDFylGe5Hc3FFvhp6uCFeT8YH1QKCRdTK+ScBhYFcintpSenZcnuEyg3pQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "60ceeb24-7884-4c72-8fd0-cef3c4a97fe2",
                            TwoFactorEnabled = false,
                            UserName = "bob_jones"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a220dec4-50fb-4c2d-97bf-465b162be606",
                            Email = "carla.white@example.com",
                            EmailConfirmed = true,
                            FirstName = "Carla",
                            LastName = "White",
                            LockoutEnabled = false,
                            NormalizedEmail = "CARLA.WHITE@EXAMPLE.COM",
                            NormalizedUserName = "CARLA_WHITE",
                            PasswordHash = "AQAAAAIAAYagAAAAEEbysmL7xFZuu1X3aiwiPYJAITeYY0LpHdQEjX2GwIjrpYAFxnl0Z1g8rmhgF/Wrag==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "260b308b-63a6-4c09-ada4-e8544653723b",
                            TwoFactorEnabled = false,
                            UserName = "carla_white"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f43136cc-a199-4990-96ea-8f60bd9a2847",
                            Email = "michael.green@example.com",
                            EmailConfirmed = true,
                            FirstName = "Michael",
                            LastName = "Green",
                            LockoutEnabled = false,
                            NormalizedEmail = "MICHAEL.GREEN@EXAMPLE.COM",
                            NormalizedUserName = "MICHAEL_GREEN",
                            PasswordHash = "AQAAAAIAAYagAAAAED0VFpSZIMRyoPl8wVYqf/CmXWOJxU09L5wbyaENI1F5TvJC7vJnKXQCT+tO76qwmA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "00161403-659a-415b-b3d4-d18625e7a41d",
                            TwoFactorEnabled = false,
                            UserName = "michael_green"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "5f78bb30-d51a-48fd-8b4e-663d382485f3",
                            Email = "linda.lee@example.com",
                            EmailConfirmed = true,
                            FirstName = "Linda",
                            LastName = "Lee",
                            LockoutEnabled = false,
                            NormalizedEmail = "LINDA.LEE@EXAMPLE.COM",
                            NormalizedUserName = "LINDA_LEE",
                            PasswordHash = "AQAAAAIAAYagAAAAEDWHP/ZW+ELpRQp7TdsBc2wIzj4NGU4W/0HNzMFcjxSuhquu4yUhTARN/Ne5ByiFAQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bbea2324-b89d-4694-a244-868c1e1596df",
                            TwoFactorEnabled = false,
                            UserName = "linda_lee"
                        },
                        new
                        {
                            Id = "8",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "03ed317c-65e1-47ee-b722-0861a65ba1fb",
                            Email = "james.brown@example.com",
                            EmailConfirmed = true,
                            FirstName = "James",
                            LastName = "Brown",
                            LockoutEnabled = false,
                            NormalizedEmail = "JAMES.BROWN@EXAMPLE.COM",
                            NormalizedUserName = "JAMES_BROWN",
                            PasswordHash = "AQAAAAIAAYagAAAAEOES0PeC5E3YWhXCPsVQH6Ys+tmDer9/aker1Zwa6VtLW6QkLQF+Z85tBkx8iL7LXg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8e49e38d-2231-4d78-b4db-5a6e4875cbb5",
                            TwoFactorEnabled = false,
                            UserName = "james_brown"
                        },
                        new
                        {
                            Id = "9",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "09a4aa64-a929-4a4c-ad34-e2fa626a87e4",
                            Email = "emma.clark@example.com",
                            EmailConfirmed = true,
                            FirstName = "Emma",
                            LastName = "Clark",
                            LockoutEnabled = false,
                            NormalizedEmail = "EMMA.CLARK@EXAMPLE.COM",
                            NormalizedUserName = "EMMA_CLARK",
                            PasswordHash = "AQAAAAIAAYagAAAAEC79N0TsOjnL4k50U//RxDWZzi2b63oxMhrfP1n0YakD8klNv7JZHRgNmc7lPmoozQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57e8cc19-3467-4e50-988e-a569f0e0d833",
                            TwoFactorEnabled = false,
                            UserName = "emma_clark"
                        },
                        new
                        {
                            Id = "10",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a1df6465-e1bc-4123-9bbd-9740fb8100b4",
                            Email = "daniel.evans@example.com",
                            EmailConfirmed = true,
                            FirstName = "Daniel",
                            LastName = "Evans",
                            LockoutEnabled = false,
                            NormalizedEmail = "DANIEL.EVANS@EXAMPLE.COM",
                            NormalizedUserName = "DANIEL_EVANS",
                            PasswordHash = "AQAAAAIAAYagAAAAEMC92Q6TM3dI3PtM1Qu282s2KPl3r7hjwR53BB0RsXtwxyPttpgkGKWqAHaqQRrLvA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "34451cac-a8c1-4f21-b5ee-242486a7c040",
                            TwoFactorEnabled = false,
                            UserName = "daniel_evans"
                        });
                });

            modelBuilder.Entity("PostMVPProject.Models.UserIssue", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("IssueId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "IssueId");

                    b.HasIndex("IssueId");

                    b.ToTable("UserIssue");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            IssueId = 3,
                            AssignedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "1",
                            IssueId = 11,
                            AssignedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "2",
                            IssueId = 5,
                            AssignedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "2",
                            IssueId = 11,
                            AssignedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "3",
                            IssueId = 10,
                            AssignedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "4",
                            IssueId = 1,
                            AssignedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "5",
                            IssueId = 6,
                            AssignedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "6",
                            IssueId = 7,
                            AssignedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "7",
                            IssueId = 8,
                            AssignedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "8",
                            IssueId = 9,
                            AssignedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc),
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("PostMVPProject.Models.UserRepository", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<int>("RepositoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("UserId", "RepositoryId");

                    b.HasIndex("RepositoryId");

                    b.ToTable("UserRepositories");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RepositoryId = 1,
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "1",
                            RepositoryId = 11,
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "2",
                            RepositoryId = 3,
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "2",
                            RepositoryId = 11,
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "3",
                            RepositoryId = 5,
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "4",
                            RepositoryId = 6,
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "5",
                            RepositoryId = 7,
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "6",
                            RepositoryId = 8,
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "7",
                            RepositoryId = 9,
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = "8",
                            RepositoryId = 10,
                            SavedAt = new DateTime(2024, 1, 21, 6, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PostMVPProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PostMVPProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostMVPProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PostMVPProject.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PostMVPProject.Models.Annotation", b =>
                {
                    b.HasOne("PostMVPProject.Models.Repository", "Repository")
                        .WithMany("Annotations")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostMVPProject.Models.User", "User")
                        .WithMany("Annotations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PostMVPProject.Models.Issue", b =>
                {
                    b.HasOne("PostMVPProject.Models.Repository", "Repository")
                        .WithMany("Issues")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("PostMVPProject.Models.Repository", b =>
                {
                    b.HasOne("PostMVPProject.Models.Category", "Category")
                        .WithMany("Repositories")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PostMVPProject.Models.UserIssue", b =>
                {
                    b.HasOne("PostMVPProject.Models.Issue", "Issue")
                        .WithMany("UserIssues")
                        .HasForeignKey("IssueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostMVPProject.Models.User", "User")
                        .WithMany("UserIssues")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Issue");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PostMVPProject.Models.UserRepository", b =>
                {
                    b.HasOne("PostMVPProject.Models.Repository", "Repository")
                        .WithMany("UserRepositories")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PostMVPProject.Models.User", "User")
                        .WithMany("UserRepositories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Repository");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PostMVPProject.Models.Category", b =>
                {
                    b.Navigation("Repositories");
                });

            modelBuilder.Entity("PostMVPProject.Models.Issue", b =>
                {
                    b.Navigation("UserIssues");
                });

            modelBuilder.Entity("PostMVPProject.Models.Repository", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("Issues");

                    b.Navigation("UserRepositories");
                });

            modelBuilder.Entity("PostMVPProject.Models.User", b =>
                {
                    b.Navigation("Annotations");

                    b.Navigation("UserIssues");

                    b.Navigation("UserRepositories");
                });
#pragma warning restore 612, 618
        }
    }
}
